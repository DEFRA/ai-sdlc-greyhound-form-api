---
description: MongoDB and Data Model Patterns
globs: src/api/**/*.js
---
# MongoDB and Data Model Patterns

## MongoDB Setup
- Uses native MongoDB driver (not Mongoose)
- Connection managed by `mongodb.js` plugin
- MongoDB client available via:
  - `server.db` - For server-level access
  - `request.db` - For request handlers
  - `server.locker` - For MongoDB locks
  - `request.locker` - For request-level locks

## Collection Naming
- Use camelCase for collection names
- Suffix with plural form (e.g., `governanceTemplates`)
- Collection names defined in model files
- Example: `collection: 'governanceTemplates'`

## Data Models
- Models defined in `model.js` files
- Use TypeScript-style JSDoc for type definitions
- Factory functions for creating documents
- Always use ObjectId for foreign keys and _id fields
- Example structure:
```javascript
/**
 * @typedef {object} ModelName
 * @property {import('mongodb').ObjectId} _id - The unique identifier
 * @property {import('mongodb').ObjectId} parentId - Reference to parent (required)
 * @property {string} name - The name field (required)
 * @property {string} [description] - Optional description
 * @property {Date} createdAt - When created (required)
 * @property {Date} updatedAt - When last updated (required)
 */

export function createModel(data) {
  const now = new Date()
  return {
    parentId: typeof data.parentId === 'string' 
      ? new ObjectId(data.parentId) 
      : data.parentId,
    name: data.name,
    description: data.description,
    createdAt: now,
    updatedAt: now
  }
}
```

## Schema Validation
- Schema validation defined in `createSchemaValidation` function
- Uses MongoDB's $jsonSchema validator
- Enforces strict validation on all collections
- Validation rules:
  - Required fields must be present
  - Field types must match specified BSON types
  - Enums enforce allowed values
  - ObjectIds for references and _id fields
  - Dates for timestamps (createdAt, updatedAt)
- Example schema:
```javascript
await db.command({
  collMod: 'collectionName',
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['parentId', 'name', 'createdAt', 'updatedAt'],
      additionalProperties: false,
      properties: {
        _id: { bsonType: 'objectId' },
        parentId: { bsonType: 'objectId' },
        name: { bsonType: 'string' },
        description: { bsonType: 'string' },
        createdAt: { bsonType: 'date' },
        updatedAt: { bsonType: 'date' },
        status: { 
          bsonType: 'string',
          enum: ['active', 'inactive']
        }
      }
    }
  },
  validationLevel: 'strict',
  validationAction: 'error'
})
```

## IDs and Foreign Keys
- Always store _id and foreign key fields as ObjectIds, NEVER as strings
- Convert string IDs to ObjectIds in factory functions
- Use proper JSDoc types to document ObjectId fields
- Example foreign key handling:
```javascript
// In model.js
/**
 * @typedef {object} ChildDocument
 * @property {import('mongodb').ObjectId} _id
 * @property {import('mongodb').ObjectId} parentId
 */

// In factory function
export function createChild(data) {
  return {
    parentId: typeof data.parentId === 'string' 
      ? new ObjectId(data.parentId) 
      : data.parentId,
    // ... other fields
  }
}

// In controller
async function findChildren(request) {
  const parentId = new ObjectId(request.params.id)
  return request.db
    .collection('children')
    .find({ parentId })
    .toArray()
}
```

## Indexes
- Defined in `src/api/common/helpers/mongodb.js`
- Created on application startup
- Use compound indexes for uniqueness constraints
- Always index foreign key fields
- Example:
```javascript
// Index on foreign key
await db.collection('children').createIndex({ parentId: 1 })

// Compound unique index
await db.collection('templates').createIndex(
  { name: 1, version: 1 }, 
  { unique: true }
)
```

## Controllers
- Use native MongoDB operations
- Access DB via `request.db`
- Common operations:
  - `collection.insertOne()` - Create
  - `collection.findOne()` - Read
  - `collection.findOneAndUpdate()` - Update
  - `collection.deleteOne()` - Delete
- Handle MongoDB errors:
  - `error.code === 11000` for duplicates
  - Use Boom for HTTP errors

## Example Usage
```javascript
// Model Definition
/**
 * @typedef {object} Template
 * @property {string} name
 * @property {string} version
 */

export function createTemplate(data) {
  return {
    name: data.name,
    version: data.version
  }
}

// Controller Usage
async function handler(request, h) {
  const doc = createTemplate(request.payload)
  const result = await request.db
    .collection('templates')
    .insertOne(doc)
  return h.response({ ...doc, _id: result.insertedId })
}
```

## Validation
- Use Joi schemas for input validation
- Define schemas in `validation.js`
- Use custom ObjectId validation for ID fields
- Example:
```javascript
const objectIdSchema = Joi.string().custom((value, helpers) => {
  if (!ObjectId.isValid(value)) {
    return helpers.error('any.invalid')
  }
  return value
}, 'MongoDB ObjectId validation')

const schema = Joi.object({
  parentId: objectIdSchema.required(),
  name: Joi.string().required()
})
```

## Error Handling
- Use Boom for HTTP errors
- Handle MongoDB specific errors:
```javascript
try {
  await collection.insertOne(doc)
} catch (error) {
  if (error.code === 11000) {
    throw Boom.conflict('Duplicate entry')
  }
  throw Boom.badRequest(error.message)
}
```

## Best Practices
1. Always use ObjectIds for _id and foreign key fields
2. Convert string IDs to ObjectIds in factory functions
3. Use proper JSDoc types for ObjectId fields
4. Index all foreign key fields
5. Validate ObjectIds in Joi schemas
6. Use factory functions for document creation
7. Define TypeScript-style JSDoc types
8. Use MongoDB indexes for constraints
9. Handle MongoDB-specific error codes
10. Use request.db for database access
11. Follow collection naming conventions
12. Document all model properties
13. Use Joi for input validation
14. Return clean errors via Boom
15. Use MongoDB's native features over application logic
16. Enforce schema validation at database level 